{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benjamindesole/Documents/GitHub/Memory/src/App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount'; //import HallOfFame, { FAKE_HOF } from './HallOfFame'\n\nimport HighScoreInput from './HighScoreInput';\nconst SIDE = 6;\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø';\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      hallOfFame: null,\n      matchedCardIndices: []\n    };\n\n    this.handleCardClick = index => {\n      const {\n        currentPair\n      } = this.state;\n\n      if (currentPair.length === 2) {\n        return;\n      }\n\n      if (currentPair.length === 0) {\n        this.setState({\n          currentPair: [index]\n        });\n        return;\n      }\n\n      this.handleNewpairClosedBy(index);\n    };\n\n    this.displayHallOfFame = hallOfFame => {\n      this.setState({\n        HallOfFame\n      });\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const {\n      currentPair,\n      matchedCardIndices\n    } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n  /**\n   * Arrow fx for binding\n   * @param {string} card \n   */\n\n\n  handleNewpairClosedBy(index) {\n    const {\n      cards,\n      currentPair,\n      guesses,\n      matchedCardIndices\n    } = this.state;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({\n      currentPair: newPair,\n      guesses: newGuesses\n    });\n\n    if (matched) {\n      this.setState({\n        matchedCardIndices: [...matchedCardIndices, ...newPair]\n      });\n    }\n\n    setTimeout(() => this.setState({\n      currentPair: []\n    }), VISUAL_PAUSE_MSECS);\n  }\n\n  render() {\n    const {\n      cards,\n      guesses,\n      hallOfFame,\n      matchedCardIndices\n    } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory\",\n      children: [/*#__PURE__*/_jsxDEV(GuessCount, {\n        guesses: guesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        feedback: this.getFeedbackForCard(index),\n        index: index,\n        onClick: this.handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)), won && (hallOfFame ? /*#__PURE__*/_jsxDEV(HallOfFame, {\n        entries: hallOfFame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(HighScoreInput, {\n        guesses: guesses,\n        onStored: this.displayHallOfFame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benjamindesole/Documents/GitHub/Memory/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","HighScoreInput","SIDE","SYMBOLS","VISUAL_PAUSE_MSECS","App","state","cards","generateCards","currentPair","guesses","hallOfFame","matchedCardIndices","handleCardClick","index","length","setState","handleNewpairClosedBy","displayHallOfFame","HallOfFame","result","size","candidates","card","pop","push","getFeedbackForCard","indexMatched","includes","newPair","newGuesses","matched","setTimeout","render","won","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\n//import HallOfFame, { FAKE_HOF } from './HallOfFame'\nimport HighScoreInput from './HighScoreInput'\n\nconst SIDE = 6\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø'\nconst VISUAL_PAUSE_MSECS = 750\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    hallOfFame: null,\n    matchedCardIndices : [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  /**\n   * Arrow fx for binding\n   * @param {string} card \n   */\n  handleCardClick = index => {\n    const { currentPair } = this.state\n\n    if (currentPair.length === 2) {\n      return\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] })\n      return\n    }\n\n    this.handleNewpairClosedBy(index)\n  }\n\n  handleNewpairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state\n\n    const newPair = [currentPair[0], index]\n    const newGuesses = guesses + 1\n    const matched = cards[newPair[0]] === cards[newPair[1]]\n    this.setState({ currentPair: newPair, guesses: newGuesses })\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] })\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS)\n  }\n\n  displayHallOfFame = (hallOfFame) => {\n    this.setState({ HallOfFame })\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices} = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {\n        cards.map((card, index) => (\n          <Card\n          card={card}\n          feedback={this.getFeedbackForCard(index)}\n          index={index}\n          key={index}\n          onClick={this.handleCardClick}\n          />\n        ))\n        }\n        {\n        won &&\n          (hallOfFame ? (\n            <HallOfFame entries={hallOfFame} />\n          ) : (\n            <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\n          ))\n        }\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}