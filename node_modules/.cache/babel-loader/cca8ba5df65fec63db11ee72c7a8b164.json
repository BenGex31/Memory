{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benjamindesole/Documents/GitHub/Memory/src/App.js\";\nimport React, { Component } from 'react';\nimport shuffle from 'lodash.shuffle';\nimport './App.css';\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame, { FAKE_HOF } from './HallOfFame';\nconst SIDE = 6;\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      matchedCardIndices: []\n    };\n\n    this.handleCardClick = ind => {\n      console.log(card, 'clicked', this);\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n\n    return shuffle(result);\n  }\n\n  getFeedbackForCard(index) {\n    const {\n      currentPair,\n      matchedCardIndices\n    } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n  /**\n   * Arrow fx for binding\n   * @param {string} card \n   */\n\n\n  render() {\n    const {\n      cards,\n      guesses,\n      matchedCardIndices\n    } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory\",\n      children: [/*#__PURE__*/_jsxDEV(GuessCount, {\n        guesses: guesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        feedback: this.getFeedbackForCard(index),\n        onClick: this.handleCardClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)), won && /*#__PURE__*/_jsxDEV(HallOfFame, {\n        entries: FAKE_HOF\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benjamindesole/Documents/GitHub/Memory/src/App.js"],"names":["React","Component","shuffle","Card","GuessCount","HallOfFame","FAKE_HOF","SIDE","SYMBOLS","App","state","cards","generateCards","currentPair","guesses","matchedCardIndices","handleCardClick","ind","console","log","card","result","size","candidates","length","pop","push","getFeedbackForCard","index","indexMatched","includes","render","won","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,IAAqBC,QAArB,QAAqC,cAArC;AAEA,MAAMC,IAAI,GAAG,CAAb;AACA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BS,KAD0B,GAClB;AACNC,MAAAA,KAAK,EAAE,KAAKC,aAAL,EADD;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,OAAO,EAAE,CAHH;AAINC,MAAAA,kBAAkB,EAAG;AAJf,KADkB;;AAAA,SAsC1BC,eAtC0B,GAsCRC,GAAG,IAAI;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EAAkB,SAAlB,EAA6B,IAA7B;AACD,KAxCyB;AAAA;;AAQ1BR,EAAAA,aAAa,GAAG;AACd,UAAMS,MAAM,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGf,IAAI,GAAGA,IAApB;AACA,UAAMgB,UAAU,GAAGrB,OAAO,CAACM,OAAD,CAA1B;;AACA,WAAOa,MAAM,CAACG,MAAP,GAAgBF,IAAvB,EAA6B;AAC3B,YAAMF,IAAI,GAAGG,UAAU,CAACE,GAAX,EAAb;AACAJ,MAAAA,MAAM,CAACK,IAAP,CAAYN,IAAZ,EAAkBA,IAAlB;AACD;;AACD,WAAOlB,OAAO,CAACmB,MAAD,CAAd;AACD;;AAEDM,EAAAA,kBAAkB,CAACC,KAAD,EAAQ;AACxB,UAAM;AAAEf,MAAAA,WAAF;AAAeE,MAAAA;AAAf,QAAsC,KAAKL,KAAjD;AACA,UAAMmB,YAAY,GAAGd,kBAAkB,CAACe,QAAnB,CAA4BF,KAA5B,CAArB;;AAEA,QAAIf,WAAW,CAACW,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOK,YAAY,IAAID,KAAK,KAAKf,WAAW,CAAC,CAAD,CAArC,GAA2C,SAA3C,GAAuD,QAA9D;AACD;;AAED,QAAIA,WAAW,CAACiB,QAAZ,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,aAAOC,YAAY,GAAG,aAAH,GAAmB,gBAAtC;AACD;;AAED,WAAOA,YAAY,GAAG,SAAH,GAAe,QAAlC;AACD;AAED;AACF;AACA;AACA;;;AAKEE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA,KAAF;AAASG,MAAAA,OAAT;AAAkBC,MAAAA;AAAlB,QAAwC,KAAKL,KAAnD;AACA,UAAMsB,GAAG,GAAGjB,kBAAkB,CAACS,MAAnB,KAA8Bb,KAAK,CAACa,MAAhD;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEV;AAArB;AAAA;AAAA;AAAA;AAAA,cADF,EAGEH,KAAK,CAACsB,GAAN,CAAU,CAACb,IAAD,EAAOQ,KAAP,kBACR,QAAC,IAAD;AACA,QAAA,IAAI,EAAER,IADN;AAEA,QAAA,QAAQ,EAAE,KAAKO,kBAAL,CAAwBC,KAAxB,CAFV;AAIA,QAAA,OAAO,EAAE,KAAKZ;AAJd,SAGKY,KAHL;AAAA;AAAA;AAAA;AAAA,cADF,CAHF,EAYGI,GAAG,iBAAI,QAAC,UAAD;AAAY,QAAA,OAAO,EAAE1B;AAArB;AAAA;AAAA;AAAA;AAAA,cAZV;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA7DyB;;AAgE5B,eAAeG,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport shuffle from 'lodash.shuffle'\n\nimport './App.css'\n\nimport Card from './Card'\nimport GuessCount from './GuessCount'\nimport HallOfFame, { FAKE_HOF } from './HallOfFame'\n\nconst SIDE = 6\nconst SYMBOLS = 'üòÄüéâüíñüé©üê∂üê±ü¶Ñüê¨üåçüåõüåûüí´üçéüçåüçìüçêüçüüçø'\n\nclass App extends Component {\n  state = {\n    cards: this.generateCards(),\n    currentPair: [],\n    guesses: 0,\n    matchedCardIndices : [],\n  }\n\n  generateCards() {\n    const result = []\n    const size = SIDE * SIDE\n    const candidates = shuffle(SYMBOLS)\n    while (result.length < size) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state\n    const indexMatched = matchedCardIndices.includes(index)\n  \n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden'\n    }\n  \n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched'\n    }\n  \n    return indexMatched ? 'visible' : 'hidden'\n  }\n\n  /**\n   * Arrow fx for binding\n   * @param {string} card \n   */\n  handleCardClick = ind => {\n    console.log(card, 'clicked', this)\n  }\n\n  render() {\n    const { cards, guesses, matchedCardIndices} = this.state\n    const won = matchedCardIndices.length === cards.length\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {\n        cards.map((card, index) => (\n          <Card\n          card={card}\n          feedback={this.getFeedbackForCard(index)}\n          key={index}\n          onClick={this.handleCardClick}\n          />\n        ))\n        }\n        {won && <HallOfFame entries={FAKE_HOF}/>}\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}